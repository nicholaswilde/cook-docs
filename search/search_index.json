{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"cook-docs","text":"<p>A tool for automatically generating markdown documentation for cooklang recipes</p>"},{"location":"#tldr","title":"TL;DR","text":""},{"location":"#installation","title":"Installation","text":"brewscoop <pre><code>brew install nicholaswilde/tap/cook-docs\n</code></pre> <pre><code>scoop bucket add nicholaswilde https://github.com/nicholaswilde/scoop-bucket.git\nscoop install nicholaswilde/cook-docs\n</code></pre>"},{"location":"#usage","title":"Usage","text":"<p>Warning</p> <p>The mode of operation of <code>cook-docs</code> is to process all recipes in the   working directory and sub folders. See Mode of Operation for   details.</p> Run binary directly<pre><code>cook-docs\n# OR\ncook-docs --dry-run # prints generated documentation to stdout rather than modifying markdown files.\n</code></pre>"},{"location":"#contributing","title":"Contributing","text":"<p>See Contributing</p>"},{"location":"#code-of-conduct","title":"Code of Conduct","text":"<p>See Code of Conduct</p>"},{"location":"#inspiration","title":"Inspiration","text":"<p>Inspiration for this repository has been taken from helm-docs.</p>"},{"location":"#license","title":"License","text":"<p>Apache License 2.0</p>"},{"location":"#author","title":"Author","text":"<p>This project was started in 2022 by Nicholas Wilde.</p>"},{"location":"CODE_OF_CONDUCT/","title":"Contributor Covenant Code of Conduct","text":""},{"location":"CODE_OF_CONDUCT/#our-pledge","title":"Our Pledge","text":"<p>We as members, contributors, and leaders pledge to make participation in our community a harassment-free experience for everyone, regardless of age, body size, visible or invisible disability, ethnicity, sex characteristics, gender identity and expression, level of experience, education, socio-economic status, nationality, personal appearance, race, caste, color, religion, or sexual identity and orientation.</p> <p>We pledge to act and interact in ways that contribute to an open, welcoming, diverse, inclusive, and healthy community.</p>"},{"location":"CODE_OF_CONDUCT/#our-standards","title":"Our Standards","text":"<p>Examples of behavior that contributes to a positive environment for our community include:</p> <ul> <li>Demonstrating empathy and kindness toward other people</li> <li>Being respectful of differing opinions, viewpoints, and experiences</li> <li>Giving and gracefully accepting constructive feedback</li> <li>Accepting responsibility and apologizing to those affected by our mistakes,   and learning from the experience</li> <li>Focusing on what is best not just for us as individuals, but for the overall   community</li> </ul> <p>Examples of unacceptable behavior include:</p> <ul> <li>The use of sexualized language or imagery, and sexual attention or advances of   any kind</li> <li>Trolling, insulting or derogatory comments, and personal or political attacks</li> <li>Public or private harassment</li> <li>Publishing others' private information, such as a physical or email address,   without their explicit permission</li> <li>Other conduct which could reasonably be considered inappropriate in a   professional setting</li> </ul>"},{"location":"CODE_OF_CONDUCT/#enforcement-responsibilities","title":"Enforcement Responsibilities","text":"<p>Community leaders are responsible for clarifying and enforcing our standards of acceptable behavior and will take appropriate and fair corrective action in response to any behavior that they deem inappropriate, threatening, offensive, or harmful.</p> <p>Community leaders have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, and will communicate reasons for moderation decisions when appropriate.</p>"},{"location":"CODE_OF_CONDUCT/#scope","title":"Scope","text":"<p>This Code of Conduct applies within all community spaces, and also applies when an individual is officially representing the community in public spaces. Examples of representing our community include using an official e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event.</p>"},{"location":"CODE_OF_CONDUCT/#enforcement","title":"Enforcement","text":"<p>Instances of abusive, harassing, or otherwise unacceptable behavior may be reported to the community leaders responsible for enforcement at [INSERT CONTACT METHOD]. All complaints will be reviewed and investigated promptly and fairly.</p> <p>All community leaders are obligated to respect the privacy and security of the reporter of any incident.</p>"},{"location":"CODE_OF_CONDUCT/#enforcement-guidelines","title":"Enforcement Guidelines","text":"<p>Community leaders will follow these Community Impact Guidelines in determining the consequences for any action they deem in violation of this Code of Conduct:</p>"},{"location":"CODE_OF_CONDUCT/#1-correction","title":"1. Correction","text":"<p>Community Impact: Use of inappropriate language or other behavior deemed unprofessional or unwelcome in the community.</p> <p>Consequence: A private, written warning from community leaders, providing clarity around the nature of the violation and an explanation of why the behavior was inappropriate. A public apology may be requested.</p>"},{"location":"CODE_OF_CONDUCT/#2-warning","title":"2. Warning","text":"<p>Community Impact: A violation through a single incident or series of actions.</p> <p>Consequence: A warning with consequences for continued behavior. No interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, for a specified period of time. This includes avoiding interactions in community spaces as well as external channels like social media. Violating these terms may lead to a temporary or permanent ban.</p>"},{"location":"CODE_OF_CONDUCT/#3-temporary-ban","title":"3. Temporary Ban","text":"<p>Community Impact: A serious violation of community standards, including sustained inappropriate behavior.</p> <p>Consequence: A temporary ban from any sort of interaction or public communication with the community for a specified period of time. No public or private interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, is allowed during this period. Violating these terms may lead to a permanent ban.</p>"},{"location":"CODE_OF_CONDUCT/#4-permanent-ban","title":"4. Permanent Ban","text":"<p>Community Impact: Demonstrating a pattern of violation of community standards, including sustained inappropriate behavior, harassment of an individual, or aggression toward or disparagement of classes of individuals.</p> <p>Consequence: A permanent ban from any sort of public interaction within the community.</p>"},{"location":"CODE_OF_CONDUCT/#attribution","title":"Attribution","text":"<p>This Code of Conduct is adapted from the Contributor Covenant, version 2.1, available at https://www.contributor-covenant.org/version/2/1/code_of_conduct.html.</p> <p>Community Impact Guidelines were inspired by Mozilla's code of conduct enforcement ladder.</p> <p>For answers to common questions about this code of conduct, see the FAQ at https://www.contributor-covenant.org/faq. Translations are available at https://www.contributor-covenant.org/translations.</p>"},{"location":"CONTRIBUTING/","title":"Contributing Guide","text":"<p>cook-docs accepts change requests using GitHub pull requests. This document outlines the process so you know what to expect.</p>"},{"location":"CONTRIBUTING/#developer-certificate-of-origin","title":"Developer Certificate of Origin","text":"<p>cook-docs uses a Developers Certificate of Origin (DCO) to sign-off that you have the right to contribute the code being contributed. The full text of the DCO reads:</p> <pre><code>Developer Certificate of Origin\nVersion 1.1\n\nCopyright (C) 2004, 2006 The Linux Foundation and its contributors.\n1 Letterman Drive\nSuite D4700\nSan Francisco, CA, 94129\n\nEveryone is permitted to copy and distribute verbatim copies of this\nlicense document, but changing it is not allowed.\n\n\nDeveloper's Certificate of Origin 1.1\n\nBy making a contribution to this project, I certify that:\n\n(a) The contribution was created in whole or in part by me and I\n    have the right to submit it under the open source license\n    indicated in the file; or\n\n(b) The contribution is based upon previous work that, to the best\n    of my knowledge, is covered under an appropriate open source\n    license and I have the right under that license to submit that\n    work with modifications, whether created in whole or in part\n    by me, under the same open source license (unless I am\n    permitted to submit under a different license), as indicated\n    in the file; or\n\n(c) The contribution was provided directly to me by some other\n    person who certified (a), (b) or (c) and I have not modified\n    it.\n\n(d) I understand and agree that this project and the contribution\n    are public and that a record of the contribution (including all\n    personal information I submit with it, including my sign-off) is\n    maintained indefinitely and may be redistributed consistent with\n    this project or the open source license(s) involved.\n</code></pre> <p>Every commit needs to have signoff added to it with a message like:</p> <pre><code>Signed-off-by: Joe Smith &lt;joe.smith@example.com&gt;\n</code></pre> <p>Git makes doing this fairly straight forward. First, please use your real name (sorry, no pseudonyms or anonymous contributions).</p> <p>If you set your <code>user.name</code> and <code>user.email</code> in your git configuration, you can sign your commit automatically with <code>git commit -s</code> or <code>git commit --signoff</code>.</p> <p>Signed commits in the git log will look something like:</p> <pre><code>Author: Joe Smith &lt;joe.smith@example.com&gt;\nDate:   Thu Feb 2 11:41:15 2018 -0800\n\n    Update README\n\n    Signed-off-by: Joe Smith &lt;joe.smith@example.com&gt;\n</code></pre> <p>Notice how the <code>Author</code> and <code>Signed-off-by</code> lines match. If they do not match the PR will be rejected by the automated DCO check.</p> <p>If more than one person contributed to a commit than there can be more than one <code>Signed-off-by</code> line where each line is a signoff from a different person who contributed to the commit.</p>"},{"location":"CONTRIBUTING/#issues","title":"Issues","text":"<p>Feature requests, bug reports, and support requests all occur through GitHub issues. If you would like to file an issue, view existing issues, or comment on an issue please engage with issues at https://github.com/nicholaswilde/cook-docs/issues</p>"},{"location":"CONTRIBUTING/#pull-request","title":"Pull Request","text":"<p>All changes to the source code are made through GitHub pull requests. If you would like to make a change to the source, docs, or other component in the repository please open a pull request with the change.</p> <p>If you are unsure if the change will be welcome you may want to file an issue first. The issue can detail the change and you can get feedback from the maintainers prior to starting to make the change.</p> <p>You can find the existing pull requests at https://github.com/nicholaswilde/cook-docs/pulls</p>"},{"location":"CONTRIBUTING/#versioning","title":"Versioning","text":"<p>Versioning is done per Semantic Versioning 2.0.0 (semver) principles.</p>"},{"location":"CONTRIBUTING/#formatting","title":"Formatting","text":"<p>Formatting is done per Gofmt principles.</p>"},{"location":"about/","title":"About","text":"<p><code>cook-docs</code> was created to help automate the generation of markdown files from cooklang recipes. I am using <code>cooklang</code> to help collect my recipes from all over the internet and I wanted to publish them on my website using mkdocs-material but I got tired of manually creating the markdown files. I knew from my experience with k8s-at-home helm charts that helm-docs existed as a tool that automatically generates markdown files from template and value files and I thought that I could make something similar for <code>cooklang</code>.</p>"},{"location":"about/#workflow","title":"Workflow","text":"<p>My ideal workflow consists of me using cook-import to parse a website from a recipe, commit it to my recipes repo, and have GitHub Actions generate the markdown files using <code>cook-docs</code> and publish them to my recipes mkdocs-material website.</p>"},{"location":"about/#mode-of-operation","title":"Mode of Operation","text":"<p>The way that <code>cook-docs</code> works is similar to <code>helm-docs</code> where it crawls through the working directory and its sub folders and looks for any <code>*.cook</code> files and <code>recipe.md.gotmpl</code> template files to process. This mode of operation is preferred over specifying each recipe file to process to help with automation. However, this requires the user to be diligent in how, when, and where they are using <code>cook-docs</code>. See ignoring recipe directories for how to ignore directories and files.</p>"},{"location":"configuration/","title":"Configuration","text":"<p><code>cook-docs</code> uses spf13's viper configuration library to handle application settings.</p> <p>Here is a list of the current supported parameters:</p> Command Line Environmental Variable Config File Default Description -d, --dry-run COOK_DOCS_DRY_RUN dryRun false don't actually render any markdown files just print to stdout passed -h, --help N/A N/A N/A help for cook-docs -i, --ignore-file string COOK_DOCS_IGNORE_FILE ignoreFile .cookdocsignore filename to use as an ignore file to exclude recipe directories -j, --jsonify COOK_DOCS_JSONIFY jsonify false parse the recipe and display it in json format -l, --log-level string COOK_DOCS_LOG_LEVEL logLevel info level of logs that should printed, one of (panic, fatal, error, warning, info, debug, trace) -c, --recipe-search-root string COOK_DOCS_RECIPE_SEARCH_ROOT recipeSearchRoot . directory to search recursively within for recipes. -t, --template-files strings COOK_DOCS_TEMPLATE_FILES templateFiles [recipe.md.gotmpl] gotemplate file paths relative to each recipe directory from which documentation will be generated -w, --word-wrap int COOK_DOCS_WORD_WRAP wordWrap 120 word wrap line length for recipe steps section -v, --version N/A N/A N/A diplay the version of cook-docs"},{"location":"configuration/#config-files","title":"Config Files","text":"<p>Configuration files may be used to set the default app settings.</p> <p>The config file name is <code>.cookdocs</code>, <code>.cookdocs.yaml</code> or <code>.cookdocs.yml</code> and can be located in any of the following locations:</p> <ul> <li><code>/etc/cook-docs/</code></li> <li><code>~/.config/</code></li> <li><code>./</code></li> </ul> .cookdocs.yaml<pre><code>---\ndryRun: false\nignoreFile: .cookdocsignore\njsonify: false\nlogLevel: info\ntemplateFiles:\n  - recipe.md.gotmpl\nwordWrap: 120\n</code></pre> <p>Note</p> <p>The variables in the config file can be both in the <code>Command Line</code> or <code>Config File</code> format. E.g. <code>dry-run</code> and <code>dryRun</code>.</p>"},{"location":"configuration/#environmental-variables","title":"Environmental Variables","text":"<p>Environmental variables are also supported. They start with the prefix <code>COOK_DOCS_</code> and use underscores instead of dashes.</p>"},{"location":"installation/","title":"Installation","text":"brew<pre><code>brew install nicholaswilde/tap/cook-docs\n</code></pre> Scoop<pre><code>scoop bucket add nicholaswilde https://github.com/nicholaswilde/scoop-bucket.git\nscoop install nicholaswilde/cook-docs\n</code></pre> winget<pre><code>WIP\n</code></pre> Build from source<pre><code>cd cmd/cook-docs\ngo build\n</code></pre> Install from source<pre><code>GO111MODULE=on go get github.com/nicholaswilde/cook-docs/cmd/cook-docs\n</code></pre>"},{"location":"templates/","title":"Templates","text":"<p>The default template may be overwritten adding <code>recipe.md.gotmpl</code> files to the recipe directories.</p> <p>If any of the specified template files is not found for a recipe (you'll notice most of the example recipe do not have a <code>recipe.md.gotmpl</code>) file, then the internal default template is used instead.</p> <p>The default internal template mentioned above uses many of these and looks like this:</p> recipe.md.gotmpl<pre><code>{{ template \"cook.headerSection\" . }}\n\n{{ template \"cook.lazyImageSection\" . }}\n\n{{ template \"cook.tableSection\" . }}\n\n{{ template \"cook.ingredientsSection\" . }}\n\n{{ template \"cook.cookwareSection\" . }}\n\n{{ template \"cook.stepsSection\" . -}}\n\n{{ template \"cook.sourceSection\" . }}\n</code></pre> <p>The tool also includes the sprig templating library, so those functions can be used in the templates you supply.</p>"},{"location":"templates/#built-in-templates","title":"Built-in Templates","text":""},{"location":"templates/#sections","title":"Sections","text":"Name Description <code>cook.headerSection</code> The main heading of the generated markdown file <code>cook.imageSection</code> The image section <code>cook.tableSection</code> The table section that consists of the serving size and total time <code>cook.ingredientsSection</code> The ingredients section <code>cook.cookwareSection</code> The cookware section <code>cook.stepsSection</code> The steps section <code>cook.stepsWithQuotedCommentsSection</code> The steps section with comments in block quotes <code>cook.stepsWithAdmonishedCommentsHeader</code> The steps section with comments in admonitions <code>cook.sourceSection</code> The source section if <code>source</code> exists in Metadata <code>cook.commentsSection</code> The comments section <code>cook.metadataSection</code> The metadata section. This prints all values in <code>Metadata</code>"},{"location":"templates/#components","title":"Components","text":"Name Description <code>cook.ingredientsHeader</code> The ingredients header <code>cook.ingredients</code> An unordered list of the ingredients <code>cook.cookwareHeader</code> The cookware header <code>cook.cookware</code> An unordered list of cookware <code>cook.stepsHeader</code> The steps header <code>cook.steps</code> A list of steps. Each step has its own sub heading labeled as <code>Step #</code> <code>cook.stepsWithQuotedCommentsHeader</code> The steps with block quotes header <code>cook.stepsWithQuotedComments</code> A list of steps with block quoted comments in between <code>cook.stepsWithAdmonishedCommentsHeader</code> The steps with admonitions headder <code>cook.stepsWithAdmonishedComments</code> A list of steps with comments as admonitions in between <code>cook.sourceHeader</code> Source header <code>cook.source</code> The <code>source</code> as a single unordered list item <code>cook.metadataHeader</code> The <code>Metadata</code> header <code>cook.metadata</code> An unordered list of the <code>Metadata</code>. <code>cook.commentsHeader</code> The comments header <code>cook.comments</code> An unordered list of the comments <code>.Info.RecipeName</code> The name of the recipe taken fromt the recipe file name <code>.Info.ImageFileName</code> The image name if an image file is found <code>.Info.ImageFilePath</code> The image path if an image file is found <code>.Info.NewRecipeFilePath</code> The new recipe file name after removal of spaces and converting to lowercase <code>.Info.RecipeFilePath</code> The file path of the recipe file <p>See template.go for how each key is defined.</p> <p>Note</p> <p>The <code>cook.commentsSection</code> does not print the comments properly (#3)</p>"},{"location":"templates/#metadata","title":"Metadata","text":"<p>Any metadata from the recipe <code>*.cook</code> file will be written to the <code>cook.metadataSection</code>.</p> <pre><code>&gt;&gt; source: https://www.gimmesomeoven.com/baked-potato/\n&gt;&gt; time required: 1.5 hours\n&gt;&gt; course: dinner\n...\n</code></pre>"},{"location":"templates/#images","title":"Images","text":"<p>Uses the <code>loading=\"lazy\"</code> that is available on every modern browser. The only requirement is <code>attr_list</code>:</p> mkdocs.yml<pre><code>...\nmarkdown_extensions:\n  - attr_list\n...\n</code></pre> <p>See mkdocs-material for reference.</p> <p>The names of the markdown and image files are made lowercase and the spaces are replaced by dashes. E.g. <code>My Recipe Name.cook -&gt; my-recipe-name.md</code> and <code>My Recipe Name.png -&gt; my-recipe-name.png</code>.</p>"},{"location":"templates/#custom-sections","title":"Custom Sections","text":"<p>Custom sections may be specified in the template by using the <code>define</code> parameter.</p> recipe.md.gotmpl<pre><code>{{- define \"custom.section\" -}}\n# My custom section\n{{- end -}}\n...\n</code></pre> <p>Then use it later in the template.</p> recipe.md.gotmpl<pre><code>...\n{{ template \"custom.section\" . }}\n</code></pre> Output<pre><code># My custom section\n</code></pre>"},{"location":"templates/#cooklang-parser","title":"Cooklang Parser","text":"<p><code>cook-docs</code> uses aquilax's cooklang-go parser to parse <code>cooklang</code> recipes. The recipes are then merged with custom cook-docs data, such as <code>Info</code> and <code>Config</code>. The data output may then be directly used inside of the <code>cook-docs</code> template files.</p> <p>See <code>parser.go</code> for the basic structure latyout.</p> <p>The <code>jsonify</code> option may also be used to output</p> Example parsed `cook-docs` output<pre><code> Output:\n {\n   \"Steps\": [\n     {\n       \"Directions\": \"Make 6 pizza balls using tipo zero flour, water, salt and fresh yeast. Put in a fridge for 2 days.\",\n       \"Timers\": [\n         {\n           \"Name\": \"\",\n           \"Duration\": 2,\n           \"Unit\": \"days\"\n         }\n       ],\n       \"Ingredients\": [\n         {\n           \"Name\": \"tipo zero flour\",\n           \"Amount\": {\n             \"IsNumeric\": true,\n             \"Quantity\": 820,\n             \"QuantityRaw\": \"820\",\n             \"Unit\": \"g\"\n           }\n         },\n         {\n           \"Name\": \"water\",\n           \"Amount\": {\n             \"IsNumeric\": true,\n             \"Quantity\": 533,\n             \"QuantityRaw\": \"533\",\n             \"Unit\": \"ml\"\n           }\n         },\n         {\n           \"Name\": \"salt\",\n           \"Amount\": {\n             \"IsNumeric\": true,\n             \"Quantity\": 24.6,\n             \"QuantityRaw\": \"24.6\",\n             \"Unit\": \"g\"\n           }\n         },\n         {\n           \"Name\": \"fresh yeast\",\n           \"Amount\": {\n             \"IsNumeric\": true,\n             \"Quantity\": 1.6,\n             \"QuantityRaw\": \"1.6\",\n             \"Unit\": \"g\"\n           }\n         }\n       ],\n       \"Cookware\": [\n         {\n           \"IsNumeric\": false,\n           \"Name\": \"fridge\",\n           \"Quantity\": 1,\n           \"QuantityRaw\": \"\"\n         }\n       ],\n       \"Comments\": null\n     },\n     {\n       \"Directions\": \"Set oven to max temperature and heat pizza stone for about 40 minutes.\",\n       \"Timers\": [\n         {\n           \"Name\": \"\",\n           \"Duration\": 40,\n           \"Unit\": \"minutes\"\n         }\n       ],\n       \"Ingredients\": [],\n       \"Cookware\": [\n         {\n           \"IsNumeric\": false,\n           \"Name\": \"oven\",\n           \"Quantity\": 1,\n           \"QuantityRaw\": \"\"\n         },\n         {\n           \"IsNumeric\": false,\n           \"Name\": \"pizza stone\",\n           \"Quantity\": 1,\n           \"QuantityRaw\": \"\"\n         }\n       ],\n       \"Comments\": null\n     },\n     {\n       \"Directions\": \"Make some tomato sauce with chopped tomato and garlic and dried oregano. Put on a pan and leave for 15 minutes occasionally stirring.\",\n       \"Timers\": [\n         {\n           \"Name\": \"\",\n           \"Duration\": 15,\n           \"Unit\": \"minutes\"\n         }\n       ],\n       \"Ingredients\": [\n         {\n           \"Name\": \"chopped tomato\",\n           \"Amount\": {\n             \"IsNumeric\": true,\n             \"Quantity\": 3,\n             \"QuantityRaw\": \"3\",\n             \"Unit\": \"cans\"\n           }\n         },\n         {\n           \"Name\": \"garlic\",\n           \"Amount\": {\n             \"IsNumeric\": true,\n             \"Quantity\": 3,\n             \"QuantityRaw\": \"3\",\n             \"Unit\": \"cloves\"\n           }\n         },\n         {\n           \"Name\": \"dried oregano\",\n           \"Amount\": {\n             \"IsNumeric\": true,\n             \"Quantity\": 3,\n             \"QuantityRaw\": \"3\",\n             \"Unit\": \"tbsp\"\n           }\n         }\n       ],\n       \"Cookware\": [\n         {\n           \"IsNumeric\": false,\n           \"Name\": \"pan\",\n           \"Quantity\": 1,\n           \"QuantityRaw\": \"\"\n         }\n       ],\n       \"Comments\": null\n     },\n     {\n       \"Directions\": \"Make pizzas putting some tomato sauce with spoon on top of flattened dough. Add fresh basil, parma ham and mozzarella.\",\n       \"Timers\": [],\n       \"Ingredients\": [\n         {\n           \"Name\": \"fresh basil\",\n           \"Amount\": {\n             \"IsNumeric\": true,\n             \"Quantity\": 18,\n             \"QuantityRaw\": \"18\",\n             \"Unit\": \"leaves\"\n           }\n         },\n         {\n           \"Name\": \"parma ham\",\n           \"Amount\": {\n             \"IsNumeric\": true,\n             \"Quantity\": 3,\n             \"QuantityRaw\": \"3\",\n             \"Unit\": \"packs\"\n           }\n         },\n         {\n           \"Name\": \"mozzarella\",\n           \"Amount\": {\n             \"IsNumeric\": true,\n             \"Quantity\": 3,\n             \"QuantityRaw\": \"3\",\n             \"Unit\": \"packs\"\n           }\n         }\n       ],\n       \"Cookware\": [\n         {\n           \"IsNumeric\": false,\n           \"Name\": \"spoon\",\n           \"Quantity\": 1,\n           \"QuantityRaw\": \"\"\n         }\n       ],\n       \"Comments\": null\n     },\n     {\n       \"Directions\": \"Put in an oven for 4 minutes.\",\n       \"Timers\": [\n         {\n           \"Name\": \"\",\n           \"Duration\": 4,\n           \"Unit\": \"minutes\"\n         }\n       ],\n       \"Ingredients\": [],\n       \"Cookware\": [\n         {\n           \"IsNumeric\": false,\n           \"Name\": \"oven\",\n           \"Quantity\": 1,\n           \"QuantityRaw\": \"\"\n         }\n       ],\n       \"Comments\": null\n     }\n   ],\n   \"Metadata\": {\n     \"servings\": \"6\",\n     \"source\": \"https://www.somewebsite.com/pizza-balls\"\n   },\n   \"Config\": {\n     \"DryRun\": false,\n     \"Jsonify\": true,\n     \"IgnoreFile\": \".cookdocsignore\",\n     \"RecipeSearchRoot\": \".\",\n     \"LogLevel\": \"info\",\n     \"TemplateFiles\": [\n       \"recipe.md.gotmpl\"\n     ],\n     \"WordWrap\": 120\n   },\n   \"Info\": {\n     \"ImageFilePath\": \"/home/nicholas/git/nicholaswilde/cook-docs/cmd/cook-docs/testdata/My Test Recipe.png\",\n     \"ImageFileName\": \"My Test Recipe.png\",\n     \"RecipeName\": \"My Test Recipe\",\n     \"RecipeFilePath\": \"/home/nicholas/git/nicholaswilde/cook-docs/cmd/cook-docs/testdata/My Test Recipe.cook\",\n     \"NewRecipeFilePath\": \"/home/nicholas/git/nicholaswilde/cook-docs/cmd/cook-docs/testdata/my-test-recipe.md\"\n   }\n }\n}\n</code></pre>"},{"location":"templates/#spacing","title":"Spacing","text":"<p>Spacing for the templates is controlled by the minus signs inside of the delimiters. See Text and spaces.</p> example<pre><code>{{- define \"custom.section\" . -}}\n{{- end -}}\n</code></pre> <p>Note</p> <p>To remove the double EOF new lines when <code>.Metadata.source</code> is missing from the recipe file but present in the template file, double new lines is added to the beginning of <code>cook.sourceSection</code> and white space is removed from the end of <code>cook.stepsSection</code>.</p>"},{"location":"usage/","title":"Usage","text":"<p>Warning</p> <p>The mode of operation of <code>cook-docs</code> is to process all recipes in the   working directory and sub folders. See Mode of Operation for   details.</p> <p>There are two important parameters to be aware of when running <code>cook-docs</code>. <code>--recipe-search-root</code> specifies the directory under which the tool will recursively search for recipes to render documentation for. <code>--template-files</code> specifies the list of gotemplate files that should be used in rendering the resulting markdown file for each chart found. By default <code>--recipe-search-root=.</code> and <code>--template-files=recipe.md.gotmpl</code>.</p> <p>If a template file is specified as a filename only as with the default above, the file is interpreted as being relative to each chart directory found. If, however, a template file is specified as a relative path, e.g. the first of <code>--template-files=./_templates.gotmpl --template-files=recipe.md.gotmpl</code> then the file is interpreted as being relative to the <code>recipe-search-root</code>.</p>"},{"location":"usage/#running-the-binary-directly","title":"Running the Binary Directly","text":"<p>To run and generate documentation into markdown files for all cooklang recipes within or recursively contained by a directory:</p> <pre><code>cook-docs\n# OR\ncook-docs --dry-run # prints generated documentation to stdout rather than modifying markdown files.\n</code></pre> <p>The tool searches recursively through subdirectories of the current directory for <code>&lt;Recipe Name&gt;.cook</code> files and generates documentation for every recipe that it finds.</p>"},{"location":"usage/#ignoring-recipe-directories","title":"Ignoring Recipe Directories","text":"<p>cook-docs supports a <code>.cookdocsignore</code> file, exactly like a <code>.gitignore</code> file in which one can specify directories to ignore when searching for recipes. Directories specified need not be charts themselves, so parent directories containing potentially many recipes can be ignored and none of the recipes underneath them will be processed. You may also directly reference the <code>&lt;Recipe Name&gt;.cook</code> file for a chart to skip processing for it.</p>"},{"location":"usage/#help","title":"Help","text":"<p>Use the <code>--help</code> parameter for help on using <code>cook-docs</code>.</p> <pre><code>cook-docs --help\n</code></pre>"},{"location":"usage/#task","title":"Task","text":"<p>go-task may be used to automate <code>cook-docs</code> tasks.</p> <p>Run <code>task</code> for a list of tasks:</p> <pre><code>task\n</code></pre>"},{"location":"usage/#pre-commit","title":"pre-commit","text":"<p>pre-commit may also be used on this project.</p> <pre><code>pre-commit install\npre-commit install-hooks\n</code></pre>"}]}